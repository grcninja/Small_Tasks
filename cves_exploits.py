#!/usr/bin/python

#To get the most of this, you should be authenticated.  
#The cheap way is to go to www.cvedetails.com, and sign in with a google account, then run the script
#You can write your own authentication module if you want to

import requests
import sys
from datetime import datetime
from bs4 import BeautifulSoup
import os
import re

dt = datetime.now()
dt = dt.strftime("%Y%m%d_%H%m%S")

valid_cve = re.compile("CVE-\d{4}-\d{4,9}?",flags=re.IGNORECASE)
metasploit_exists = re.compile("https:\/\/www\.rapid7\.com\/db\/modules\/exploit",flags=re.IGNORECASE)
it_is_unknown = re.compile("Unknown CVE ID",flags=re.IGNORECASE)
exploit_exists = re.compile("http:\/\/www\.exploit-db\.com\/exploits\/",flags=re.IGNORECASE)

cve_status = {}

def cve_unknown(soup):
    #Just because a CVE is returned unknown in this source, does not mean it is invalid.
    #It simply means that this source has no information on it
    for tag in soup.find_all(id="contentdiv"):
        if it_is_unknown.search(str(tag)): 
            return True
    return False

def metasploit_status(soup):
    for link in soup.find_all('a'):
        l = str(link.get('href'))
        if metasploit_exists.search(str(l)): 
            return l
    return False

def exploitdb_status(soup):
    #there could be more than one URL for exploitDB, this is only going to return the first one
    for link in soup.find_all('a'):    
        l = str(link.get('href'))
        if exploit_exists.search(l): 
            return l
    return False

#data in this file should be one per line "CVE-YYYY-nnnnn"
source = raw_input("Enter the full path including the file name to your list of cves: ")
in_directory = os.path.dirname(source)
in_filename = os.path.basename(source)

out_directory = os.path.join(in_directory,"CVEcheckResults",dt)

#create a new directory, with today's date
if not os.path.exists(out_directory):
    os.makedirs(out_directory)
    print "\nThe results will be placed in "+str(out_directory)+"\n"
else:
    print "there is a problem making the directory"

seen = set()
with open(source,"r") as fin:
    for line in fin:
        if line not in seen:
            seen.add(line)
            cve = line.strip()
            if valid_cve.match(cve):
                try:
	            p = {"cve_id":cve}
       	            u="https://www.cvedetails.com/cve-details.php"
                    out_filename = cve.replace("-","_")+".html"
                    results = os.path.join(out_directory,out_filename)
                    with open(results,"w") as fout:            
	                with requests.get(url = u, params=p, stream=True, timeout=2) as r:
	                    if r.status_code==200:
		                for chunk in r.iter_content(chunk_size=128):
		                    fout.write(chunk)
                            else:
                                print cve+" returned a "+str(r.status_code)+" status code when trying to find these results."
                                fout.write(r.url+" returns status code "+str(r.status_code))
                except:
                    continue
                    #this is lazy, do more with the errors, at least write something to an error file

            #dictionary to hold three traits of the cve found on the source (www.cvedetails.com)
            # cve_unknown -- reflect if the CVE was found in the database at source
            # metasploit_status -- if source reports a metasploit module existing
            # exploitdb_status -- if source reports a metasploit module existing
            #check to see if the CVE is found in the HTML garbage that is returned
            cve_info = {}

            thesoup = BeautifulSoup(open(results), "html.parser")
            if cve_unknown(thesoup):  #this returns True if the source says this is an Unknown CVE
                cve_info['in_cvedetails.com'] = 'No'
                cve_info['metasploit_module'] = 'unknown'
                cve_info['exploitdb_exploit'] = 'unknown'
            else:
                cve_info['in_cvedetails.com'] = 'Yes'
                cve_info['metasploit_module'] = metasploit_status(thesoup)
                cve_info['exploitdb_exploit'] = exploitdb_status(thesoup)

            cve_status[cve] = cve_info

cve_summary = os.path.join(in_directory,dt+"_cvesummary.txt")
print "The cve cummary file will be placed in "+str(cve_summary+"\n")

with open(cve_summary,"w") as report:
    report.write("#The script is designed to return only the first link found when there is a URL for exploit-DB or Metasploit Modules\n")
    report.write("#If there is one entry reported, you should do your due diligence and go see if there are others.\n")
    for k, v in cve_status.iteritems():
        report.write(str(k)+","+str(v)+"\n")
